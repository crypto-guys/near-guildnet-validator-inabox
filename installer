#!/bin/bash

set -eu
# Script settings 
RELEASE=focal # groovy focal or bionic
NEAR_VERSION="1.18.1-rc.2"
NEAR_REPO="https://github.com/near-guildnet/nearcore.git"
NODE_EXPORTER_REPO="https://github.com/prometheus/node_exporter.git"
NEAR_EXPORTER_REPO="https://github.com/masknetgoal634/near-prometheus-exporter.git"
# Get the correct config.json
GUILDNET_CONFIG_URL="https://s3.us-east-2.amazonaws.com/build.openshards.io/nearcore-deploy/guildnet/config.json"
GUILDNET_GENESIS_URL="https://s3.us-east-2.amazonaws.com/build.openshards.io/nearcore-deploy/guildnet/genesis.json"

echo "               Compile neard?"
read COMPILE
echo "               Create a validator?"
read VAL
echo "               Enter Your Pool ID or leave blank if not needed"
read poolId
echo "               Enter Your Account ID or leave blank if not needed"
read accountId

vm_name=compiler
validator_name=validator
manager_name=manager

echo "* Starting the NEARCORE compile process"

function init_lxd {
    echo "* Init LXD With Preseed ---> https://linuxcontainers.org/lxd/docs/master/preseed  "
    echo "* Cloud init + lxd examples  ---> https://github.com/lxc/lxd/issues/3347 "
    cat <<EOF | lxd init --auto
EOF
    systemctl restart snapd
    sleep 5
}

function update_via_apt {

    echo "* Updating via APT and installing required packages"
    apt-get -qq update && apt-get -qq upgrade
    apt-get -qq install snapd squashfs-tools git curl python3

    echo '* Install lxd using snap'
    snap install lxd
    usermod -aG lxd "$USER"
    systemctl restart snapd
    sleep 5
    snap restart lxd
    sleep 5
    init_lxd

}

function prepare_validator 
{
    
    echo "* Configuring the validator container"
    lxc exec ${validator_name} -- sh -c "apt-get -qq update"
    lxc exec ${validator_name} -- sh -c "apt-get -qq upgrade"
    lxc exec ${validator_name} -- sh -c "apt-get -qq autoremove"
    lxc exec ${validator_name} -- sh -c "apt-get -qq autoclean"

}

function prepare_manager 
{
    
    echo "* Configuring the manager container"
    lxc exec ${manager_name} -- sh -c "apt-get -qq update"
    lxc exec ${manager_name} -- sh -c "apt-get -qq upgrade"
    lxc exec ${manager_name} -- sh -c "apt-get -qq autoremove"
    lxc exec ${manager_name} -- sh -c "apt-get -qq autoclean"
    lxc exec ${manager_name} -- sh -c "apt-get -qq install git curl wget htop iotop nmon nload"
    lxc exec ${manager_name} -- sh -c "wget https://raw.githubusercontent.com/solutions-crypto/near-guildnet-tools/main/staking-bot/stakingSeatBot.sh -o /usr/local/bin/stakingSeatBot.sh"
    lxc exec ${manager_name} -- sh -c "sed -i 's+\"ACCOUNT_ID\"=.*+\"ACCOUNT_ID\"= '\"$accountId'\",+g' /usr/local/bin/stakingSeatBot.sh"
    lxc exec ${manager_name} -- sh -c "sed -i 's+\"POOL_ID\"=.*+\"POOL_ID\"= '\"$poolId'\",+g' /usr/local/bin/stakingSeatBot.sh"
    lxc exec ${manager_name} -- sh -c "curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -"
    lxc exec ${manager_name} -- sh -c "apt-get -qq install nodejs build-essential"
    lxc exec ${manager_name} -- sh -c "npm install -g near-cli"
    lxc exec ${manager_name} -- sh -c "echo 'export NEAR_ENV=guildnet' >> bash.rc"
    
}

function prepare_host {

    iptables -t nat -A PREROUTING -p tcp --dport 24567 -j DNAT --to-destination INTERNALIP:24567

}

function prepare_container 
{
    echo "* Pausing for 5 seconds while the container initializes"
    sleep 5

    echo "* Configuring the container with all required development tools"
    lxc exec ${vm_name} -- sh -c "apt-get -qq update"
    lxc exec ${vm_name} -- sh -c "apt-get -qq upgrade"
    lxc exec ${vm_name} -- sh -c "apt-get -qq autoremove"
    lxc exec ${vm_name} -- sh -c "apt-get -qq autoclean"
    lxc exec ${vm_name} -- sh -c "apt-get -qq install git snapd curl libclang-dev build-essential llvm runc gcc g++ g++-multilib make cmake clang pkg-config libssl-dev libudev-dev libx32stdc++6-7-dbg lib32stdc++6-7-dbg python3-dev"
    lxc exec ${vm_name} -- sh -c "snap install rustup --classic"
    lxc exec ${vm_name} -- sh -c "snap install go --classic"
    lxc exec ${vm_name} -- sh -c "rustup default nightly"
    lxc exec ${vm_name} -- sh -c "rustup update"
    echo "* The container is ready for use"
}

function create_management_container {

    if [ "$RELEASE" == "groovy" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/groovy/cloud/amd64 ${validator_name} -p validator
    sleep 100
    prepare_manager
    fi
    if [ "$RELEASE" == "focal" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/focal/cloud/amd64 ${validator_name} -p validator -p default
    sleep 100
    prepare_manager
    fi
    if [ "$RELEASE" == "bionic" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/18.04/cloud/amd64 ${validator_name} -p validator -p default
    sleep 100
    prepare_manage
    fi
    
}
function get_container {

    if [ "$RELEASE" == "groovy" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/groovy/cloud/amd64 ${vm_name} 
    sleep 100
    prepare_container
    fi
    if [ "$RELEASE" == "focal" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/focal/cloud/amd64 ${vm_name}
    sleep 100
    prepare_container
    fi

    if [ "$RELEASE" == "bionic" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/18.04/cloud/amd64 ${vm_name}
    prepare_container
    fi
}

function create_container_profiles {

    lxc profile copy default validator
    cat ./profile | lxc profile edit validator

}

function create_validator_container {

    if [ "$RELEASE" == "groovy" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/groovy/cloud/amd64 ${validator_name} -p validator
    sleep 100
    prepare_validator
    fi
    if [ "$RELEASE" == "focal" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/focal/cloud/amd64 ${validator_name} -p validator -p default
    sleep 100
    prepare_validator
    fi
    if [ "$RELEASE" == "bionic" ]
    then
    echo "* Launching Ubuntu $RELEASE Cloud Image then pausing for 100 seconds"
    lxc launch images:ubuntu/18.04/cloud/amd64 ${validator_name} -p validator -p default
    sleep 100
    prepare_validator
    fi

}

function compile {
    echo "* Cloning the github source"
    lxc exec ${vm_name} -- sh -c "rm -rf /tmp/src && mkdir -p /tmp/src/ && git clone ${NEAR_REPO} /tmp/src/nearcore"
    lxc exec ${vm_name} -- sh -c "git clone ${NEAR_EXPORTER_REPO} /tmp/src/near-prometheus-exporter"
    lxc exec ${vm_name} -- sh -c "git clone ${NODE_EXPORTER_REPO} /tmp/src/node-exporter"
    echo "* Switching Version"
    lxc exec ${vm_name} -- sh -c "cd /tmp/src/nearcore && git checkout $NEAR_VERSION"
    echo "* Attempting to compile nearcore"
    lxc exec ${vm_name} -- sh -c "cd /tmp/src/nearcore && cargo build -p neard --release"
    echo "* Attempting to compile Near Prometheus Exporter"
    lxc exec ${vm_name} -- sh -c "cd /tmp/src/near-prometheus-exporter && go build -a -installsuffix cgo -ldflags="-w -s" -o main ."
    echo "* Attempting to compile Prometheus Node Exporter"
    lxc exec ${vm_name} -- sh -c "cd /tmp/src/node-exporter/ && make "
    lxc exec ${vm_name} -- sh -c "mkdir -p /tmp/src/node-exporter/node_exporter_binaries && cp -r /tmp/src/node-exporter/docs /tmp/src/node-exporter/node_exporter_binaries"
    lxc exec ${vm_name} -- sh -c "cp -r /tmp/src/node-exporter/examples /tmp/src/node-exporter/node_exporter_binaries && cp -r /tmp/src/node-exporter/node_exporter /tmp/src/node-exporter/node_exporter_binaries"
    lxc exec ${vm_name} -- sh -c "cp /tmp/src/node-exporter/*.yml /tmp/src/node-exporter/node_exporter_binaries && cp /tmp/src/node-exporter/*.md /tmp/src/node-exporter/node_exporter_binaries"
    lxc exec ${vm_name} -- sh -c "cp -r /tmp/src/node-exporter/text_collector_examples/ /tmp/src/node-exporter/node_exporter_binaries && cp -r /tmp/src/node-exporter/tls_config_noAuth.bad.yml /tmp/src/node-exporter/node_exporter_binaries"
    lxc exec ${vm_name} -- sh -c "tar -cjf /tmp/src/node-exporter/node_exporter.tar.gz -C /tmp/src/node-exporter/ node_exporter_binaries"
}

function get_binary {
    echo "* Retriving the binary files"
    mkdir -p /tmp/binaries/
    lxc file pull -p ${vm_name}/tmp/src/nearcore/target/release/neard /tmp/binaries/
    lxc file pull -p ${vm_name}/tmp/src/near-prometheus-exporter/near-exporter /tmp/binaries/
    lxc file pull -p ${vm_name}/tmp/src/node-exporter/node_exporter.tar.gz /tmp/binaries/
    lxc file pull -p ${vm_name}/tmp/src/node-exporter/node_exporter /tmp/binaries/
}

function put_binary {

    echo "* Pushing the binary files to the validator container"
    lxc file push /tmp/binaries/neard ${validator_name}/usr/local/bin/neard
    create_neard_service

}

function create_neard_service
{

    # Copy Guildnet Files to a suitable location
    lxc exec ${validator_name} -- sh -c "mkdir -p /home/neard/.near/guildnet"


    echo '* Getting the correct files and fixing permissions'
    lxc exec ${validator_name} -- sh -c "neard --home /home/neard/.near/guildnet init --chain-id guildnet --account-id '$poolId'"
    lxc exec ${validator_name} -- sh -c "sudo wget "$GUILDNET_CONFIG_URL" -O /home/neard/.near/guildnet/config.json"
    lxc exec ${validator_name} -- sh -c "sudo wget "$GUILDNET_GENESIS_URL" -O /home/neard/.near/guildnet/genesis.json"
    lxc exec ${validator_name} -- sh -c "chown -R neard:near /home/neard/"

}

function enable_neard_service {

    lxc exec ${validator_name} -- sh -c "systemctl daemon-reload"
    lxc exec ${validator_name} -- sh -c "systemctl enable neard"

}

function start_neard {

    lxc exec ${validator_name} -- sh -c "systemctl start neard"

}

function stop_neard {

    lxc exec ${validator_name} -- sh -c "systemctl stop neard"

}

function update_staking_key {

    yourValidatorId=$(lxc exec ${validator_name} -- sh -c "cat /home/neard/.near/guildnet/validator_key.json | grep \"account_id\"")
    yourPublicKey=$(lxc exec ${validator_name} -- sh -c "cat /home/neard/.near/guildnet/validator_key.json | grep \"public_key\"")
    echo "* Please enter the following command from your near-cli machine"
    echo '         near call '$yourValidatorId' update_staking_key '{"stake_public_key": "'$yourPublicKey'"}' --accountId '$accountId''

}

if [ "$USER" != "root" ]
then
    echo " You must run the compile script using:  sudo ./compiler.sh "
    exit
fi

 
function create_compiler_container {

    update_via_apt
    get_container

}

function compile_neard {

    compile
    get_binary

}
function create_validator {

    create_container_profiles
    create_validator_container
    put_binary    
    enable_neard_service
    start_neard
    update_staking_key
}


function auto_installer {

    if [ $COMPILE = y ]
    then
        create_compiler_container
        compile_neard
    fi
    if [ $VAL = y ]
    then
        create_validator
    fi 

}

auto_installer
